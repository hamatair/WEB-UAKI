package actions

import (
	"fmt"
	"io"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"

	"backend_server/models"
	"backend_server/storage"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Media)
// DB Table: Plural (media)
// Resource: Plural (Media)
// Path: Plural (/media)
// View Template Folder: Plural (/templates/media/)

// MediaResource is the resource for the Media model
type MediaResource struct {
	buffalo.Resource
}

// List gets all Media. This function is mapped to the path
// GET /media
func (v MediaResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	media := &models.Media{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Media from the DB
	if err := q.All(media); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("media", media)
		return c.Render(http.StatusOK, r.HTML("media/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(media))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(media))
	}).Respond(c)
}

// Show gets the data for one Media. This function is mapped to
// the path GET /media/{media_id}
func (v MediaResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Media
	media := &models.Media{}

	// To find the Media the parameter media_id is used.
	if err := tx.Find(media, c.Param("media_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("media", media)

		return c.Render(http.StatusOK, r.HTML("media/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(media))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(media))
	}).Respond(c)
}

// Create adds a Media to the DB. This function is mapped to the
// path POST /media
func (v MediaResource) Create(c buffalo.Context) error {
	// Allocate an empty Media
	media := &models.Media{}

	// Bind media to the html form elements
	if err := c.Bind(media); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(media)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("media", media)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("media/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "media.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/media/%v", media.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(media))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(media))
	}).Respond(c)

}

// Update changes a Media in the DB. This function is mapped to
// the path PUT /media/{media_id}
func (v MediaResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Media
	media := &models.Media{}

	if err := tx.Find(media, c.Param("media_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Media to the html form elements
	if err := c.Bind(media); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(media)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("media", media)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("media/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "media.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/media/%v", media.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(media))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(media))
	}).Respond(c)
}

// Destroy deletes a Media from the DB. This function is mapped
// to the path DELETE /media/{media_id}
func (v MediaResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Media
	media := &models.Media{}

	// To find the Media the parameter media_id is used.
	if err := tx.Find(media, c.Param("media_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(media); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "media.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/media")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(media))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(media))
	}).Respond(c)
}

func UploadImage(c buffalo.Context) error {
	file, err := c.File("image") // ambil dari form
	if err != nil {
		return c.Error(400, err)
	}
	defer file.Close()

	buf, _ := io.ReadAll(file)

	storage := storage.NewStorageService()
	url, err := storage.Upload(c.Request().Context(), "images/"+file.Filename, buf)
	if err != nil {
		return c.Error(500, err)
	}

	return c.Render(200, r.JSON(map[string]string{
		"message": "upload success",
		"url":     url,
	}))
}
