package actions

import (
	"fmt"
	"log"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop/v6"
	"github.com/gobuffalo/x/responder"
	"golang.org/x/crypto/bcrypt"

	"backend_server/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Admin)
// DB Table: Plural (admins)
// Resource: Plural (Admins)
// Path: Plural (/admins)
// View Template Folder: Plural (/templates/admins/)

// AdminsResource is the resource for the Admin model
type AdminsResource struct {
	buffalo.Resource
}

// List gets all Admins. This function is mapped to the path
// GET /admins
func (v AdminsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	admins := &models.Admins{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Admins from the DB
	if err := q.All(admins); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// Add the paginator to the context so it can be used in the template.
		c.Set("pagination", q.Paginator)

		c.Set("admins", admins)
		return c.Render(http.StatusOK, r.HTML("admins/index.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(admins))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(admins))
	}).Respond(c)
}

// Show gets the data for one Admin. This function is mapped to
// the path GET /admins/{admin_id}
func (v AdminsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Admin
	admin := &models.Admin{}

	// To find the Admin the parameter admin_id is used.
	if err := tx.Find(admin, c.Param("admin_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		c.Set("admin", admin)

		return c.Render(http.StatusOK, r.HTML("admins/show.plush.html"))
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(200, r.JSON(admin))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(200, r.XML(admin))
	}).Respond(c)
}

// Create adds a Admin to the DB. This function is mapped to the
// path POST /admins
func (v AdminsResource) Create(c buffalo.Context) error {
	// Allocate an empty Admin
	admin := &models.Admin{}

	// Bind admin to the html form elements
	if err := c.Bind(admin); err != nil {
		return err
	}

	//make hashPassword
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(admin.Password), 10)
	if err != nil {
		return err
	}
	log.Printf("Hashed password: %s", string(hashedPassword))
	admin.Password = string(hashedPassword)

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(admin)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the new.html template that the user can
			// correct the input.
			c.Set("admin", admin)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("admins/new.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "admin.created.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/admins/%v", admin.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.JSON(admin))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusCreated, r.XML(admin))
	}).Respond(c)
}

// Update changes a Admin in the DB. This function is mapped to
// the path PUT /admins/{admin_id}
func (v AdminsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Admin
	admin := &models.Admin{}

	if err := tx.Find(admin, c.Param("admin_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind Admin to the html form elements
	if err := c.Bind(admin); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(admin)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		return responder.Wants("html", func(c buffalo.Context) error {
			// Make the errors available inside the html template
			c.Set("errors", verrs)

			// Render again the edit.html template that the user can
			// correct the input.
			c.Set("admin", admin)

			return c.Render(http.StatusUnprocessableEntity, r.HTML("admins/edit.plush.html"))
		}).Wants("json", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
		}).Wants("xml", func(c buffalo.Context) error {
			return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
		}).Respond(c)
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a success message
		c.Flash().Add("success", T.Translate(c, "admin.updated.success"))

		// and redirect to the show page
		return c.Redirect(http.StatusSeeOther, "/admins/%v", admin.ID)
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(admin))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(admin))
	}).Respond(c)
}

// Destroy deletes a Admin from the DB. This function is mapped
// to the path DELETE /admins/{admin_id}
func (v AdminsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Admin
	admin := &models.Admin{}

	// To find the Admin the parameter admin_id is used.
	if err := tx.Find(admin, c.Param("admin_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(admin); err != nil {
		return err
	}

	return responder.Wants("html", func(c buffalo.Context) error {
		// If there are no errors set a flash message
		c.Flash().Add("success", T.Translate(c, "admin.destroyed.success"))

		// Redirect to the index page
		return c.Redirect(http.StatusSeeOther, "/admins")
	}).Wants("json", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.JSON(admin))
	}).Wants("xml", func(c buffalo.Context) error {
		return c.Render(http.StatusOK, r.XML(admin))
	}).Respond(c)
}


// LoginHandler handles login requests
func (v AdminsResource) Login(c buffalo.Context) error {
	// Ambil input JSON
	var input struct {
		Email    string `json:"email"`
		Password string `json:"password"`
	}
	if err := c.Bind(&input); err != nil {
		return c.Error(http.StatusBadRequest, err)
	}

	// Ambil DB connection
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Cari admin berdasarkan email
	admin := &models.Admin{}
	if err := tx.Where("email = ?", input.Email).First(admin); err != nil {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("invalid credentials"))
	}

	// Cek password
	if err := bcrypt.CompareHashAndPassword([]byte(admin.Password), []byte(input.Password)); err != nil {
		return c.Error(http.StatusUnauthorized, fmt.Errorf("invalid credentials"))
	}

	// TODO: generate token (JWT misalnya)
	token, err := JWTService.CreateJWTToken(admin.ID)
	if err != nil {
		log.Printf("Error generating token: %v", err)
		return c.Error(http.StatusInternalServerError, fmt.Errorf("could not generate token"))
	}

	// Untuk sementara, balikin data admin
	return c.Render(200, r.JSON(map[string]interface{}{
		"message": "login success",
		"admin":   admin,
		"token":   token,
	}))
}
